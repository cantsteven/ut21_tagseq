---
title: "ut21_tagseq"
format: html
editor: visual
---

```{r echo= FALSE}
library(tidyverse)
library(readr)
library(DESeq2)
library(org.Rn.eg.db)
library(EnhancedVolcano)
library(patchwork)
library(ggprism)

# For GSEA 
library(clusterProfiler) #BiocManager::install("clusterProfiler")
library(org.Rn.eg.db) #BiocManager::install("org.Rn.eg.db")
library(scales) # for wrapping long text in graphs 
```

### Turning the individual htseq count files into a count matrix

```{r}
# Set the full path to the working directory
full_path <- "/stor/work/Fonken/UT21_tagseq/JA24159-423452132/concat_fastq/trim_files/star_trim/htseq_counts/"

# Get the list of count files with the full path
file_list <- list.files(full_path, pattern = "*.txt", full.names = TRUE)

# making a list of data frames with row and column names while removing last five lines from HTSeq that contains the features and ambiguous read infromation
dfList <- lapply(file_list, function(x) {
  read.csv(x, nrows = length(count.fields(x))-5, sep = "\t", header = F, row.names = 1, col.names = c("genes",tools::file_path_sans_ext(basename(x))))})

# combining all the dataframes into single dataframe
matrix <- bind_cols(dfList)

# renaming the columns to take the 6th and 7th character from the current file names 
colnames(matrix) <- sapply(colnames(matrix), function(x) substr(x, 6, 7))
```

### Splitting the count matrix into one for females and males

```{r}
# splitting matrices into males and females
m_matrix <- matrix %>%
  dplyr::select("B2", "A1", "B1", "C1", "D1", "C2", "H2", "A3", "B3", "C3", "F3") 
  #dropped B2 (low reads)
  #dropped C3, F3 (possible choroid plexus contamination)
 #in the end kept all subjects in

f_matrix <- matrix %>%
  dplyr::select("E2", "E1", "F1", "G1", "H1", "A2", "D2", "G2", "D3", "F2", "E3") 
  #dropped E2 (low reads + choroid plexus contamination)
  #dropped F2, E3 (possible choroid plexus contamination)
#in the end kept all subjects in

# group information 
group_info <- read.csv("/stor/work/Fonken/UT21_tagseq/ut21_tagseq/group_info_ut21.csv")

m_group_info <- group_info %>%
  filter(sex == "male") %>%
   mutate(treatment = factor(treatment, levels = c("oil", "flutamide")))

#%>%
  #filter(sex == "male", !id %in% c("B2"))
  
f_group_info <- group_info %>%
  filter(sex == "female") %>%
   mutate(treatment = factor(treatment, levels = c("oil", "testosterone")))

#%>%
  #filter(sex == "female", !id %in% c("E2"))
```

**DESeq**

```{r}
### Males 
# constructing object 
m_dds <- DESeqDataSetFromMatrix(countData = m_matrix,
                       colData = m_group_info, 
                       design = ~treatment)

# prefiltering, only keeping genes with more than XX reads
m_keep <- rowSums(counts(m_dds)) >= 10
m_dds <- m_dds[m_keep,]

# running DESeq
m_dds <- DESeq(m_dds)
m_res <- results(m_dds, contrast = c("treatment", "oil", "flutamide"))
m_res

summary(m_res)

m_res_ordered <- m_res[order(m_res$pvalue),]
head(m_res_ordered)

# DF and gene name annotations
m_res_df <- as.data.frame(m_res_ordered)
m_res_df$symbol <- mapIds(org.Rn.eg.db, keys = rownames(m_res_df), keytype = "ENSEMBL", column = "SYMBOL")

### Females
# constructing object 
f_dds <- DESeqDataSetFromMatrix(countData = f_matrix,
                       colData = f_group_info, 
                       design = ~treatment)

# prefiltering, only keeping genes with more than XX reads
f_keep <- rowSums(counts(f_dds)) >= 10
f_dds <- f_dds[f_keep,]

# running DESeq
f_dds <- DESeq(f_dds)
f_res <- results(f_dds, contrast = c("treatment", "oil", "testosterone"))
f_res

# Making a list of results, ordered by p value 
f_res_ordered <- f_res[order(f_res$pvalue),]
head(f_res_ordered)

summary(f_res)

# making the DF and adding gene name annotations
f_res_df <- as.data.frame(f_res_ordered)
f_res_df$symbol <- mapIds(org.Rn.eg.db, keys = rownames(f_res_df), keytype = "ENSEMBL", column = "SYMBOL")

write.csv(f_res_df, file = "/stor/work/Fonken/UT21_tagseq/ut21_tagseq/f_res_df.csv")
write.csv(m_res_df, file = "/stor/work/Fonken/UT21_tagseq/ut21_tagseq/m_res_df.csv")
```

### Comparing males and females with only oil

```{r fig.height = 8, fig.width = 8}
group_info_oil <- group_info[group_info$treatment == "oil", ]

matrix_oil <- matrix[, (group_info_oil$id)]

### Females and Males 
# constructing object 
mf_dds <- DESeqDataSetFromMatrix(countData = matrix_oil,
                       colData = group_info_oil, 
                       design = ~sex)

# prefiltering, only keeping genes with more than XX reads
mf_keep <- rowSums(counts(mf_dds)) >= 10
mf_dds <- mf_dds[mf_keep,]

# running DESeq
mf_dds <- DESeq(mf_dds)
mf_res <- results(mf_dds, contrast = c("sex", "female", "male"))
mf_res

summary(mf_res)

mf_res_ordered <- mf_res[order(mf_res$pvalue),]
head(mf_res_ordered)

# DF and gene name annotations
mf_res_df <- as.data.frame(mf_res_ordered)
mf_res_df$symbol <- mapIds(org.Rn.eg.db, keys = rownames(mf_res_df), keytype = "ENSEMBL", column = "SYMBOL")

mf_volcano <- EnhancedVolcano(mf_res_df,
  lab = mf_res_df$symbol,
  x = 'log2FoldChange',
  y = 'pvalue', 
  pCutoffCol = "padj",
  pCutoff = 0.05,
  FCcutoff = 0.5,
  #xlim = c(-6, 6),
  #ylim = c(0, 8),
  selectLab = c("Kdm5d", "Eif2s3y", "LOC103694537", "Ddx3", "Uty", "Eif2s3", "Amz1", "ENSRNOG00000065796"),
  title = "Females vs Males Oil Treatment Only",
  legendPosition = 'none',
  subtitle = NULL,
  gridlines.major = FALSE,
  gridlines.minor = FALSE,
  col = c("grey30", "red2", "orange", "forestgreen"))

mf_volcano


```

### **Comparing all males and females**

```{r}
### Females and Males 
# constructing object 
mf_dds <- DESeqDataSetFromMatrix(countData = matrix,
                       colData = group_info, 
                       design = ~sex)

# prefiltering, only keeping genes with more than XX reads
mf_keep <- rowSums(counts(mf_dds)) >= 10
mf_dds <- mf_dds[mf_keep,]

# running DESeq
mf_dds <- DESeq(mf_dds)
mf_res <- results(mf_dds, contrast = c("sex", "female", "male"))
mf_res

summary(mf_res)

mf_res_ordered <- mf_res[order(mf_res$pvalue),]
head(mf_res_ordered)

# DF and gene name annotations
mf_res_df <- as.data.frame(mf_res_ordered)
mf_res_df$symbol <- mapIds(org.Rn.eg.db, keys = rownames(mf_res_df), keytype = "ENSEMBL", column = "SYMBOL")
```

### Volcano Plots

```{r fig.height = 5, fig.width = 10}
m_volcano <- EnhancedVolcano(m_res_df,
  lab = m_res_df$symbol,
  x = 'log2FoldChange',
  y = 'pvalue', 
  pCutoffCol = "padj",
  pCutoff = 0.05,
  FCcutoff = 1.5,
  xlim = c(-6, 6),
  ylim = c(0, 8),
  title = "Males",
  legendPosition = 'none',
  subtitle = NULL,
  gridlines.major = FALSE,
  gridlines.minor = FALSE,
  col = c("grey30", "red2", "orange", "forestgreen"))

f_volcano <- EnhancedVolcano(f_res_df,
  lab = f_res_df$symbol,
  x = 'log2FoldChange',
  y = 'pvalue', 
  pCutoffCol = "padj",
  pCutoff = 0.05,
  FCcutoff = 1.5,
  xlim = c(-6, 6),
  ylim = c(0, 8),
  title = "Females",
  legendPosition = 'none',
  subtitle = NULL,
  gridlines.major = FALSE,
  gridlines.minor = FALSE,
  col = c("grey30", "red2", "orange", "forestgreen"))

volcano_combo <- f_volcano + m_volcano
volcano_combo
```

```{r fig.height = 15, fig.width = 12}
# Males --------
# Creating the Ranked Gene List for GSEA GO Analysis 
m_genelist <- m_res_df$log2FoldChange
names(m_genelist) <- m_res_df$symbol
m_genelist = sort(m_genelist, decreasing = TRUE)

gse_m <- gseGO(geneList=m_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none") 

gse_m_df <- gse_m@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_m@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_m_graph <- ggplot(gse_m_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#4CAF50")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

#Females
# Creating the Ranked Gene List for GSEA GO Analysis 
f_genelist <- f_res_df$log2FoldChange
names(f_genelist) <- f_res_df$symbol
f_genelist = sort(f_genelist, decreasing = TRUE)

gse_f <- gseGO(geneList=f_genelist, 
             ont ="BP", 
             keyType = "SYMBOL", 
             minGSSize = 3, 
             maxGSSize = 800, 
             pvalueCutoff = 0.05, 
             verbose = TRUE, 
             OrgDb = org.Rn.eg.db, 
             pAdjustMethod = "none") 

gse_f_df <- gse_f@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            gse_f@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

gse_f_graph <- ggplot(gse_f_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#9C27B0", "FALSE" = "#9C27B0")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("GO: Biological Processes") + 
    ylab(NULL)

# Males
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
 m_res_df_kegg <-  m_res_df %>%
  rownames_to_column(var = "gene")

 m_res_df_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = m_res_df_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "ENSEMBL", 
                               multiVals = "first")

# Excluding NA values 
 m_res_df_kegg <- na.omit(m_res_df_kegg)

# Creating list 
kegglist <- m_res_df_kegg$log2FoldChange
names(kegglist) <- m_res_df_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

m_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

m_kegg_df <- m_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            m_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

m_kegg_graph <- ggplot(m_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#4CAF50", "FALSE" = "#4CAF50")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

m_kegg_graph

# Females
# Creating the ranked gene list for GSEA KEGG Analysis (This one needs EntrezIDs)
 f_res_df_kegg <-  f_res_df %>%
  rownames_to_column(var = "gene")

 f_res_df_kegg$entrez_id <- mapIds(org.Rn.eg.db, 
                               keys = f_res_df_kegg$gene, 
                               column = "ENTREZID", 
                               keytype = "ENSEMBL", 
                               multiVals = "first")

# Excluding NA values 
 f_res_df_kegg <- na.omit(f_res_df_kegg)

# Creating list 
kegglist <- f_res_df_kegg$log2FoldChange
names(kegglist) <- f_res_df_kegg$entrez_id
kegglist = sort(kegglist, decreasing = TRUE)
kegg_organism = "rno" # need to define organism with 3 letter code

f_kegg <- gseKEGG(geneList = kegglist,
               organism     = kegg_organism,
               minGSSize    = 3,
               maxGSSize    = 800,
               pvalueCutoff = 0.05,
               pAdjustMethod = "none",
               keyType       = "ncbi-geneid")

f_kegg_df <- f_kegg@result %>%
        arrange(desc(NES)) %>%
        slice(1:5) %>%
        bind_rows(
            f_kegg@result %>%
            arrange(NES) %>%
            slice(1:5)
        )

f_kegg_graph <- ggplot(f_kegg_df, aes(NES, fct_reorder(Description, NES), fill = NES > 0)) + 
    geom_col(orientation='y') + 
    theme_prism(base_size = 9) + 
    scale_fill_manual(values = c("TRUE" = "#9C27B0", "FALSE" = "#9C27B0")) +
    scale_y_discrete(labels = label_wrap(40)) + 
    theme(legend.position = "none") + 
    xlab("Normalized Enrichment Score") + 
    ggtitle("KEGG Pathways") + 
    ylab(NULL)

f_kegg_graph

# Volcano plots read in
# Males
volcano_m <- EnhancedVolcano(m_res_df,
                             lab = m_res_df$symbol,
                             x = "log2FoldChange",
                             y = "pvalue",
                             FCcutoff = 0.5,
                             pCutoff = 0.05,
                             #selectLab = c('Mfrp','Igfbp2'),
                             pCutoffCol = "padj",
                             xlim = c(-4, 4),
                             ylim = c(0, 9),
                             subtitle = NULL,
                             gridlines.major = FALSE,
                             gridlines.minor = FALSE,
                             col = c("gray50", "#4CAF50", "#4CAF50", "#4CAF50")
                             ) + 
  ggtitle("Males") + 
  annotate("text", x = 1.5, y = 8.5, label = "↑ with flutamide", hjust = 0, size = 5, color = 'black') +
  annotate("text", x = -3.5, y = 8.5, label = "↓ with flutamide", hjust = 0, size = 5, color = 'black') +
  theme_prism(base_size = 10) + 
  theme(legend.position = "none")

# Females
volcano_f <- EnhancedVolcano(f_res_df,
                             lab = f_res_df$symbol,
                             x = "log2FoldChange",
                             y = "pvalue",
                             FCcutoff = 0.5,
                             pCutoff = 0.05,
                             pCutoffCol = "padj",
                             xlim = c(-4, 4),
                             ylim = c(0, 9),
                             subtitle = NULL,
                             gridlines.major = FALSE,
                             gridlines.minor = FALSE,
                             col = c("gray50", "#9C27B0", "#9C27B0", "#9C27B0")
                             ) + 
  ggtitle("Females") + 
  annotate("text", x = 1, y = 8.5, label = "↑ with testosterone", hjust = 0, size = 5, color = 'black') +
  annotate("text", x = -3.5, y = 8.5, label = "↓ with testosterone", hjust = 0, size = 5, color = 'black') +
  theme_prism(base_size = 10) + 
  theme(legend.position = "none")

# Figure 2 Creation---
free(volcano_f + volcano_m) / (gse_f_graph + gse_m_graph) / (f_kegg_graph + m_kegg_graph) + plot_layout(height = c(2,2,2)) + plot_annotation(tag_levels = 'A') 

ggsave("/stor/work/Fonken/UT23_snRNAseq/local_ut23/Graphs/microglia_ut23_volcanogsea.png", dpi = 300, width = 12, height = 15)
```

### Looking at Ttr expression

```{r}
ttr_matrix<- matrix

ttr_matrix$symbol <- mapIds(org.Rn.eg.db, keys = rownames(ttr_matrix), keytype = "ENSEMBL", column = "SYMBOL")

ttr_matrix <- ttr_matrix %>%
  filter(symbol == "Ttr") %>%
  t() %>%
  as.data.frame %>%
  rownames_to_column()

colnames(ttr_matrix) <- c("id", "count")

ttr_matrix <- ttr_matrix %>%
  left_join(group_info, by = "id") %>%
  filter(id != "symbol") 

ttr_matrix$count <- as.numeric(as.character(ttr_matrix$count))

ggplot(ttr_matrix, aes(x= id, y = count, color = sex, fill = treatment)) + 
  geom_bar(stat = "identity") + 
  ggtitle("Raw Ttr gene counts by sample") + 
  theme_minimal()

```

### Plot PCA

```{r}
# males 
m_vst <- vst(m_dds)

m_pca <- plotPCA(m_vst, intgroup = c("treatment"))  
  
m_pca + geom_label(aes(label = name))

# females
f_vst <- vst(f_dds)

f_pca <- plotPCA(f_vst, intgroup = c("treatment"))

f_pca + geom_label(aes(label = name))

```
